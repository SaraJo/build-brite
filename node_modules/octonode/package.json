{
  "name": "octonode",
  "version": "0.3.5",
  "author": {
    "name": "Pavan Kumar Sunkara",
    "email": "pavan.sss1991@gmail.com",
    "url": "http://pksunkara.github.com"
  },
  "description": "nodejs wrapper for github v3 api",
  "main": "./lib/octonode",
  "repository": {
    "type": "git",
    "url": "git://github.com/pksunkara/octonode.git"
  },
  "keywords": [
    "wrapper",
    "api",
    "v3",
    "github"
  ],
  "homepage": "http://pksunkara.github.com/octonode",
  "scripts": {
    "test": "./node_modules/.bin/vows --spec $(find test -name '*.js')"
  },
  "contributors": [
    {
      "name": "Pavan Kumar Sunkara",
      "email": "pavan.sss1991@gmail.com"
    },
    {
      "name": "Martin Wawrusch",
      "email": "martin@wawrusch.com"
    },
    {
      "name": "Joe Frambach",
      "email": "joe.frambach@showclix.com"
    }
  ],
  "dependencies": {
    "request": "2.9.x",
    "randomstring": "1.x.x"
  },
  "devDependencies": {
    "nock": "0.7.x",
    "vows": "0.6.x",
    "coffee-script": "1.4.0"
  },
  "engines": {
    "node": ">0.4.11"
  },
  "bugs": {
    "url": "https://github.com/pksunkara/octonode/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/pksunkara/octonode/raw/master/LICENSE"
    }
  ],
  "readme": "# octonode\n\noctonode is a library for nodejs to access the [github v3 api](http://developer.github.com)\n\n## Installation\n```\nnpm install octonode\n```\n\n## Usage\n\n```js\nvar github = require('octonode');\n\n// Then we instanciate a client with or without a token (as show in a later section)\n\nvar ghme   = client.me();\nvar ghuser = client.user('pksunkara');\nvar ghrepo = client.repo('pksunkara/hub');\nvar ghorg  = client.org('flatiron');\nvar ghgist = client.gist();\nvar ghteam = client.team(37);\n\nvar ghsearch = client.search();\n```\n\n#### Build a client which accesses any public information\n\n```js\nvar client = github.client();\n\nclient.get('/users/pksunkara', function (err, status, body) {\n  console.log(body); //json object\n});\n```\n\n#### Build a client from an access token\n\n```js\nvar client = github.client('someaccesstoken');\n\nclient.get('/user', function (err, status, body) {\n  console.log(body); //json object\n});\n```\n\n#### Build a client from credentials\n\n```js\nvar client = github.client({\n  username: 'pksunkara',\n  password: 'password'\n});\n\nclient.get('/user', function (err, status, body) {\n  console.log(body); //json object\n});\n```\n\n#### Build a client from client keys\n\n```js\nvar client = github.client({\n  id: 'abcdefghijklmno',\n  secret: 'abcdefghijk'\n});\n\nclient.get('/user', function (err, status, body) {\n  console.log(body); //json object\n});\n```\n\n__Many of the below use cases use parts of the above code__\n\n## Authentication\n\n#### Authenticate to github in cli mode (desktop application)\n\n```js\ngithub.auth.config({\n  username: 'pksunkara',\n  password: 'password'\n}).login(['user', 'repo', 'gist'], function (err, id, token) {\n  console.log(id, token);\n});\n```\n\n#### Revoke authentication to github in cli mode (desktop application)\n\n```js\ngithub.auth.config({\n  username: 'pksunkara',\n  password: 'password'\n}).revoke(id, function (err) {\n  if (err) throw err;\n});\n```\n\n#### Authenticate to github in web mode (web application)\n\n```js\n// Web application which authenticates to github\nvar http = require('http')\n  , url = require('url')\n  , qs = require('querystring')\n  , github = require('octonode');\n\n// Build the authorization config and url\nvar auth_url = github.auth.config({\n  id: 'mygithubclientid',\n  secret: 'mygithubclientsecret'\n}).login(['user', 'repo', 'gist']);\n\n// Store info to verify against CSRF\nvar state = auth_url.match(/&state=([0-9a-z]{32})/i);\n\n// Web server\nhttp.createServer(function (req, res) {\n  uri = url.parse(req.url);\n  // Redirect to github login\n  if (uri.pathname=='/login') {\n    res.writeHead(301, {'Content-Type': 'text/plain', 'Location': auth_url})\n    res.end('Redirecting to ' + auth_url);\n  }\n  // Callback url from github login\n  else if (uri.pathname=='/auth') {\n    var values = qs.parse(uri.query);\n    // Check against CSRF attacks\n    if (!state || state[1] != values.state) {\n      res.writeHead(403, {'Content-Type': 'text/plain'});\n      res.end('');\n    } else {\n      github.auth.login(values.code, function (err, token) {\n        res.writeHead(200, {'Content-Type': 'text/plain'});\n        res.end(token);\n      });\n    }\n  } else {\n    res.writeHead(200, {'Content-Type': 'text/plain'})\n    res.end('');\n  }\n}).listen(3000);\n\nconsole.log('Server started on 3000');\n```\n\n## Rate Limiting\n\nYou can also check your rate limit status by calling the following.\n\n```js\nclient.limit(function (err, left, max) {\n  console.log(left); // 4999\n  console.log(max);  // 5000\n});\n```\n\n## API Callback Structure\n\n__All the callbacks for the following will take first an error argument, then a data argument, like this:__\n\n```js\nghme.info(function(err, data) {\n  console.log(\"error: \" + err);\n  console.log(\"data: \" + data);\n});\n```\n\n## Github authenticated user api\n\nToken/Credentials required for the following:\n\n#### Get information about the user (GET /user)\n\n```js\nghme.info(callback); //json\n```\n\n#### Update user profile (PATCH /user)\n\n```js\nghme.update({\n  \"name\": \"monalisa octocat\",\n  \"email\": \"octocat@github.com\",\n}, callback);\n```\n\n#### Get emails of the user (GET /user/emails)\n\n```js\nghme.emails(callback); //array of emails\n```\n\n#### Set emails of the user (POST /user/emails)\n\n```js\nghme.emails(['new1@ma.il', 'new2@ma.il'], callback); //array of emails\nghme.emails('new@ma.il', callback); //array of emails\n```\n\n#### Delete emails of the user (DELETE /user/emails)\n\n```js\nghme.emails(['new1@ma.il', 'new2@ma.il']);\nghme.emails('new@ma.il');\n```\n\n#### Get the followers of the user (GET /user/followers)\n\n```js\nghme.followers(callback); //array of github users\n```\n\n#### Get users whom the user is following (GET /user/following)\n\n```js\nghme.following(callback); //array of github users\n```\n\n#### Check if the user is following a user (GET /user/following/marak)\n\n```js\nghme.following('marak', callback); //boolean\n```\n\n#### Follow a user (PUT /user/following/marak)\n\n```js\nghme.follow('marak');\n```\n\n#### Unfollow a user (DELETE /user/following/marak)\n\n```js\nghme.unfollow('marak');\n```\n\n#### Get public keys of a user (GET /user/keys)\n\n```js\nghme.keys(callback); //array of keys\n```\n\n#### Get a single public key (GET /user/keys/1)\n\n```js\nghme.keys(1, callback); //key\n```\n\n#### Create a public key (POST /user/keys)\n\n```js\nghme.keys({\"title\":\"laptop\", \"key\":\"ssh-rsa AAA...\"}, callback); //key\n```\n\n#### Update a public key (PATCH /user/keys/1)\n\n```js\nghme.keys(1, {\"title\":\"desktop\", \"key\":\"ssh-rsa AAA...\"}, callback); //key\n```\n\n#### Delete a public key (DELETE /user/keys/1)\n\n```js\nghme.keys(1);\n```\n\n#### List your public and private organizations (GET /user/orgs)\n\n```js\nghme.orgs(callback); // array of orgs\n```\n\n#### List your repositories (GET /user/repos)\n\n```js\nghme.repos(callback); //array of repos\n```\n\n#### Create a repository (POST /user/repos)\n\n```js\nghme.repos({\n  \"name\": \"Hello-World\",\n  \"description\": \"This is your first repo\",\n}, callback); //repo\n```\n\n#### Fork a repository (POST /repos/pksunkara/hub/forks)\n\n```js\nghme.fork('pksunkara/hub', callback); //forked repo\n```\n\n## Github users api\n\nNo token required for the following\n\n#### Get information about an user (GET /users/pksunkara)\n\n```js\nghuser.info(callback); //json\n```\n\n#### Get an user followers (GET /users/pksunkara/followers)\n\n```js\nghuser.followers(callback); //array of github users\n```\n\n#### Get an user followings (GET /users/pksunkara/following)\n\n```js\nghuser.following(callback); //array of github users\n```\n\n## Github repositories api\n\n#### Get information about a repository (GET /repos/pksunkara/hub)\n\n```js\nghrepo.info(callback); //json\n```\n\n#### Get the commits for a repository (GET /repos/pkumar/hub/commits)\n\n```js\nghrepo.commits(callback); //array of commits\n```\n\n#### Get the tags for a repository (GET /repos/pksunkara/hub/tags)\n\n```js\nghrepo.tags(callback); //array of tags\n```\n\n#### Get the languages for a repository (GET /repos/pksunkara/hub/languages)\n\n```js\nghrepo.languages(callback); //array of languages\n```\n\n#### Get the contributors for a repository (GET /repos/pksunkara/hub/contributors)\n\n```js\nghrepo.contributors(callback); //array of github users\n```\n\n#### Get the branches for a repository (GET /repos/pksunkara/hub/branches)\n\n```js\nghrepo.branches(callback); //array of branches\n```\n\n#### Get the issues for a repository (GET /repos/pksunkara/hub/issues)\n\n```js\nghrepo.issues(callback); //array of issues\n```\n\n#### Get the README for a repository (GET /repos/pksunkara/hub/readme)\n\n```js\nghrepo.readme(callback); //file\nghrepo.readme('v0.1.0', callback); //file\n```\n\n#### Get the contents of a path in repository\n\n```js\nghrepo.contents('lib/index.js', callback); //path\nghrepo.contents('lib/index.js', 'v0.1.0', callback); //path\n```\n\n#### Get archive link for a repository\n\n```js\nghrepo.archive('tarball', callback); //link to archive\nghrepo.archive('zipball', 'v0.1.0', callback); //link to archive\n```\n\n#### Get the blob for a repository (GET /repos/pksunkara/hub/git/blobs/SHA)\n\n```js\nghrepo.blob('18293abcd72', callback); //blob\n```\n\n#### Get users who starred a repository (GET /repos/pksunkara/hub/stargazers)\n\n```js\nghrepo.stargazers(1, 100, callback); //array of users\nghrepo.stargazers(10, callback);     //array of users\nghrepo.stargazers(callback);         //array of users\n```\n\n#### Get the teams for a repository (GET /repos/pksunkara/hub/teams)\n\n```js\nghrepo.teams(callback); //array of teams\n```\n\n#### Get a git tree (GET /repos/pksunkara/hub/git/trees/18293abcd72)\n\n```js\nghrepo.tree('18293abcd72', callback); //tree\nghrepo.tree('18293abcd72', true, callback); //recursive tree\n```\n\n#### Delete the repository (DELETE /repos/pksunkara/hub)\n\n```js\nghrepo.destroy();\n```\n\n#### List statuses for a specific ref (GET /repos/pksunkara/hub/statuses/master)\n\n```js\nghrepo.statuses('master', callback); // array of statuses\n```\n\n#### Create status (POST /repos/pksunkara/hub/statuses/SHA)\n\n```js\nghrepo.status('18e129c213848c7f239b93fe5c67971a64f183ff', {\n  \"state\": \"success\",\n  \"target_url\": \"http://ci.mycompany.com/job/hub/3\",\n  \"description\": \"Build success.\"\n}, callback); // created status\n```\n\n## Github organizations api\n\n#### Get information about an organization (GET /orgs/flatiron)\n\n```js\nghorg.info(callback); //json\n```\n\n#### Update an organization (POST /orgs/flatiron)\n\n```js\nghorg.update({\n  blog: 'https://blog.com'\n}, callback); // org\n```\n\n#### List organization repositories (GET /orgs/flatiron/repos)\n\n```js\nghorg.repos(callback); //array of repos\n```\n\n#### Create an organization repository (POST /orgs/flatiron/repos)\n\n```js\nghorg.repos({\n  name: 'Hello-world',\n  description: 'My first world program'\n}, callback); //repo\n```\n\n#### Get an organization's teams (GET /orgs/flatiron/teams)\n\n```js\nghorg.teams(callback); //array of teams\n```\n\n#### Get an organization's members (GET /orgs/flatiron/members)\n\n```js\nghorg.members(callback); //array of github users\n```\n\n#### Check an organization member (GET /orgs/flatiron/members/pksunkara)\n\n```js\nghorg.member('pksunkara', callback); //boolean\n```\n\n## Github gists api\n\n#### List authenticated user's gists (GET /gists)\n\n```js\nghgist.list(callback); //array of gists\n```\n\n#### List authenticated user's public gists (GET /gists/public)\n\n```js\nghgist.public(callback); //array of gists\n```\n\n#### List authenticated user's starred gists (GET /gists/starred)\n\n```js\nghgist.starred(callback); //array of gists\n```\n\n#### List a user's public gists (GET /users/pksunkara/gists)\n\n```js\nghgist.user('pksunkara', callback); //array of gists\n```\n\n#### Get a single gist (GET /gists/37)\n\n```js\nghgist.get(37, callback); //gist\n```\n\n#### Create a gist (POST /gists)\n\n```js\nghgist.create({\n  description: \"the description\",\n  files: { ... }\n}), callback); //gist\n```\n\n#### Edit a gist (PATCH /gists/37)\n\n```js\nghgist.edit(37, {\n  description: \"hello gist\"\n}, callback); //gist\n```\n\n#### Delete a gist (DELETE /gists/37)\n\n```js\nghgist.delete(37);\n```\n\n#### Fork a gist (POST /gists/37/forks)\n\n```js\nghgist.fork(37, callback); //gist\n```\n\n#### Star a gist (PUT /gists/37/star)\n\n```js\nghgist.star(37);\n```\n\n#### Unstar a gist (DELETE /gists/37/unstar)\n\n```js\nghgist.unstar(37);\n```\n\n#### Check if a gist is starred (GET /gists/37/star)\n\n```js\nghgist.check(37); //boolean\n```\n\n#### List comments on a gist (GET /gists/37/comments)\n\n```js\nghgist.comments(37, callback); //array of comments\n```\n\n#### Create a comment (POST /gists/37/comments)\n\n```js\nghgist.comments(37, {\n  body: \"Just commenting\"\n}, callback); //comment\n```\n\n#### Get a single comment (GET /gists/comments/1)\n\n```js\nghgist.comment(1, callback); //comment\n```\n\n#### Edit a comment (POST /gists/comments/1)\n\n```js\nghgist.comment(1, {\n  body: \"lol at commenting\"\n}, callback); //comment\n```\n\n#### Delete a comment (DELETE /gists/comments/1)\n\n```js\nghgist.comment(1);\n```\n\n## Github teams api\n\n#### Get a team (GET /team/37)\n\n```js\nghteam.info(callback); //json\n```\n\n#### Get the team members (GET /team/37/members)\n\n```js\nghteam.members(callback); //array of github users\n```\n\n#### Check if a user is part of the team (GET /team/37/members/pksunkara)\n\n```js\nghteam.member('pksunkara'); //boolean\n```\n\n## Github search api\n\n#### Search issues\n\n```js\nghsearch.issues('pksunkara/hub', 'open', 'git', callback); //array of issues\n```\n\n#### Search repositories\n\n```js\nghsearch.repos('git', 'javascript', 1, callback); //array of repositories\n```\n\n#### Search users\n\n```js\nghsearch.users('git', callback); //array of users\n```\n\n#### Search emails\n\n```js\nghsearch.emails('pavan.sss1991@gmail.com', callback); //user\n```\n\n## Testing\n```\nnpm test\n```\n\nIf you like this project, please watch this and follow me.\n\n## Contributors\nHere is a list of [Contributors](http://github.com/pksunkara/octonode/contributors)\n\n### TODO\n\nThe following method names use underscore as an example. The library contains camel cased method names.\n\n```js\n\n// public repos for unauthenticated, private and public for authenticated\nme.get_watched_repositories(callback);\nme.is_watching('repo', callback);\nme.start_watching('repo', callback);\nme.stop_watching('repo', callback);\nme.get_issues(params, callback);\n\n// organization data\nvar org = octonode.Organization('bulletjs');\n\norg.update(dict_with_update_properties, callback);\norg.add_member('user', 'team', callback);\norg.remove_member('user', callback);\norg.get_public_members(callback);\norg.is_public_member('user', callback);\norg.make_member_public('user', callback);\norg.conceal_member('user', callback);\n\norg.get_team('team', callback);\norg.create_team({name:'', repo_names:'', permission:''}, callback);\norg.edit_team({name:'', permission:''}, callback);\norg.delete_team('name', callback);\norg.get_team_members('team', callback);\norg.get_team_member('team', 'user', callback);\norg.remove_member_from_team('user', 'team', callback);\norg.get_repositories(callback);\norg.create_repository({name: ''}, callback);\norg.get_team_repositories('team', callback);\norg.get_team_repository('team', 'name', callback);\norg.add_team_repository('team', 'name', callback);\norg.remove_team_repository('team', 'name', callback);\n\nvar repo = octonode.Repository('pksunkara/octonode');\n\nrepo.update({name: ''}, callback);\n\n// collaborator information\nrepo.has_collaborator('name', callback);\nrepo.add_collaborator('name', callback);\nrepo.remove_collaborator('name', callback);\n\n// commit data\nrepo.get_commit('sha-id', callback);\nrepo.get_all_comments(callback);\nrepo.get_commit_comments('SHA ID', callback);\nrepo.comment_on_commit({body: '', commit_id: '', line: '', path: '', position: ''}, callback);\nrepo.get_single_comment('comment id', callback);\nrepo.edit_single_comment('comment id', callback);\nrepo.delete_single_comment('comment id', callback);\n\n// downloads\nrepo.get_downloads(callback);\nrepo.get_download(callback);\nrepo.create_download({name: ''}, 'filepath', callback);\nrepo.delete_download(callback);\n\n// keys\nrepo.get_deploy_keys(callback);\nrepo.get_deploy_key('id', callback);\nrepo.create_deploy_key({title: '', key: ''}, callback);\nrepo.edit_deploy_key({title: '', key: ''}, callback);\nrepo.delete_deploy_key('id', callback);\n\n// watcher data\nrepo.get_watchers(callback);\n\n// pull requests\nrepo.get_all_pull_request_comments(callback);\nrepo.get_pull_request_comment('id', callback);\nrepo.create_pull_request_comment('id', {body:'', commit_id:'', path:'', position:''}, callback);\nrepo.reply_to_pull_request_comment('id', 'body', callback);\nrepo.edit_pull_request_comment('id', 'body', callback);\nrepo.delete_pull_request_comment('id', callback);\nrepo.get_issues(params, callback);\nrepo.get_issue('id', callback);\nrepo.create_issue({title: ''}, callback);\nrepo.edit_issue({title: ''}, callback);\nrepo.get_issue_comments('issue', callback);\nrepo.get_issue_comment('id', callback);\nrepo.create_issue_comment('id', 'comment', callback);\nrepo.edit_issue_comment('id', 'comment', callback);\nrepo.delete_issue_comment('id', callback);\nrepo.get_issue_events('id', callback);\nrepo.get_events(callback);\nrepo.get_event('id', callback);\nrepo.get_labels(callback);\nrepo.get_label('id', callback);\nrepo.create_label('name', 'color', callback);\nrepo.edit_label('name', 'color', callback);\nrepo.delete_label('id', callback);\nrepo.get_issue_labels('issue', callback);\nrepo.add_labels_to_issue('issue', ['label1', 'label2'], callback);\nrepo.remove_label_from_issue('issue', 'labelid', callback);\nrepo.set_labels_for_issue('issue', ['label1', 'label2'], callback);\nrepo.remove_all_labels_from_issue('issue', callback);\nrepo.get_labels_for_milestone_issues('milestone', callback);\nrepo.get_milestones(callback);\nrepo.get_milestone('id', callback);\nrepo.create_milestone('title', callback);\nrepo.edit_milestone('title', callback);\nrepo.delete_milestone('id', callback);\n\n// raw git access\nrepo.create_blob('content', 'encoding', callback);\nrepo.get_commit('sha-id', callback);\nrepo.create_commit('message', 'tree', [parents], callback);\nrepo.get_reference('ref', callback);\nrepo.get_all_references(callback);\nrepo.create_reference('ref', 'sha', callback);\nrepo.update_reference('ref', 'sha', force, callback);\n```\n\n__I accept pull requests and guarantee a reply back within a day__\n\n## License\nMIT/X11\n\n## Bug Reports\nReport [here](http://github.com/pksunkara/octonode/issues). __Guaranteed reply within a day__.\n\n## Contact\nPavan Kumar Sunkara (pavan.sss1991@gmail.com)\n\nFollow me on [github](https://github.com/users/follow?target=pksunkara), [twitter](http://twitter.com/pksunkara)\n",
  "readmeFilename": "README.md",
  "_id": "octonode@0.3.5",
  "dist": {
    "shasum": "8317e7da8cb5550bd3bd7d662a7343c332353a66"
  },
  "_from": "octonode@",
  "_resolved": "https://registry.npmjs.org/octonode/-/octonode-0.3.5.tgz"
}
