{
  "name": "temporal",
  "description": "Non-blocking, temporal task sequencing.",
  "version": "0.2.8",
  "homepage": "https://github.com/rwldrn/temporal",
  "author": {
    "name": "Rick Waldron",
    "email": "waldron.rick@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rwldrn/temporal.git"
  },
  "bugs": {
    "url": "https://github.com/rwldrn/temporal/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rwldrn/temporal/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/temporal",
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "es6-collections": ">=0.2.0"
  },
  "devDependencies": {
    "grunt": "0.4.1",
    "grunt-contrib-jshint": "0.3.0",
    "grunt-contrib-nodeunit": "latest",
    "grunt-contrib-watch": "latest"
  },
  "keywords": [
    "schedule",
    "task",
    "settimeout",
    "setinterval",
    "nexttick",
    "process",
    "sequence",
    "sequencing"
  ],
  "readme": "# temporal\n\nNon-blocking, temporal task sequencing. `temporal` does NOT use `setTimeout` or `setInterval`.\n\n## Presentations\n\n- [EmpireJS](https://dl.dropboxusercontent.com/u/3531958/empirejs/index.html)\n- [CascadiaJS](https://dl.dropboxusercontent.com/u/3531958/cascadiajs/index.html)\n\n\n\n\n## Getting Started\n\n```bash\nnpm install temporal\n```\n\n\n## Examples\n\n```javascript\nvar temporal = require(\"temporal\");\n\n// Wait n milliseconds, execute a task\ntemporal.delay( 500, function() {\n\n  console.log( \"500ms later...\" );\n\n});\n\n// Loop every n milliseconds, executing a task each time\ntemporal.loop( 500, function() {\n\n  console.log( \"Every 500ms...\" );\n\n  // |this| is a reference to the temporal instance\n  // use it to cancel the loop by calling:\n  //\n  this.stop();\n\n  // The number of times this loop has been executed:\n  this.called; // number\n\n  // The first argument to the callback is the same as |this|\n});\n\n// Queue a sequence of tasks: delay, delay\n// Each delay time is added to the prior delay times.\ntemporal.queue([\n  {\n    delay: 500,\n    task: function() {\n      // Executes 500ms after temporal.queue(...) is called\n    }\n  },\n  {\n    delay: 500,\n    task: function() {\n      // Executes 1000ms after temporal.queue(...) is called\n\n      // The last \"delay\" task will emit an \"ended\" event\n    }\n  }\n]);\n\n// Queue a sequence of tasks: delay then loop\n// Each delay time is added to the prior delay times.\ntemporal.queue([\n  {\n    delay: 500,\n    task: function() {\n      // Executes 500ms after temporal.queue(...) is called\n    }\n  },\n  {\n    loop: 100,\n    task: function() {\n      // Executes 600ms after temporal.queue(...) is called\n\n      // Executes every 100ms thereafter.\n    }\n  }\n]);\n```\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt](https://github.com/gruntjs/grunt).\n\n## License\nCopyright (c) 2012 Rick Waldron\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "temporal@0.2.8",
  "_from": "temporal@latest"
}
